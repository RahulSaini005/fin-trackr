<% layout('layout') -%>

<div class="sidebar-container">
  <h2>Categories</h2>
  <a href="#" class="category">🍽️ Food</a>
  <a href="#" class="category">🧳 Travel</a>
  <a href="#" class="category">💊 Health</a>
  <a href="#" class="category">📚 Education</a>
  <a href="#" class="category">🛍️ Shopping</a>
  <a href="#" class="category">🏠 Rent</a>
  <a href="#" class="category">💡 Bills</a>
  <a href="#" class="category">🎬 Entertainment</a>
  <a href="#" class="category">📶 Subscriptions</a>
  <a href="#" class="category">🎁 Gift</a>
  <a href="#" class="category">🛠️ Maintenance</a>
  <a href="#" class="category">🚑 Insurance</a>
  <a href="#" class="category">👶 Kids</a>
  <a href="#" class="category">🐶 Pet care</a>
  <a href="#" class="category">🌐 Internet</a>
  <a href="#" class="category">📞 Mobile Recharge</a>
  <a href="#" class="category">🛒 Essentials</a>
  <a href="#" class="category">👨‍👩‍👧 Family</a>
  <a href="#" class="category">📦 Others</a>
</div>

<style>

  .main-section {
  margin-left: 300px; /* Leaves space for fixed sidebar */
  padding: 20px;
  padding-top: 60px;
  min-height: calc(100vh - 120px); 
}

/* Ensure spacing and alignment of date filter */
.date-filter {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 12px;
  margin-top: 20px; /* changed from 30px */
  margin-bottom: 20px; /* changed from 40px */
}



.sidebar-container {
  width: 270px;
  background: linear-gradient(to bottom, #ffffff, #f8fafc);
  padding: 25px 20px;
  border-radius: 16px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.06);
  position: fixed;
  top: 56px; /* Adjusted to leave space below navbar */
  left: 0px;
  max-height: 620px;
  overflow-y: auto;
  border: 1px solid #e5e7eb;
  z-index: 10;
  transition: all 0.3s ease-in-out;
}

.sidebar-container h2 {
  font-size: 22px;
  font-weight: 600;
  text-align: center;
  color: #111827;
  margin-bottom: 18px;
  font-family: "Segoe UI", Roboto, Helvetica, sans-serif;
}

.category {
  display: flex;
  align-items: center;
  padding: 12px 14px;
  margin-bottom: 10px;
  text-decoration: none;
  color: #1f2937;
  background-color: #f1f5f9;
  border-radius: 10px;
  font-size: 15px;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
  box-shadow: inset 0 0 0 transparent;
}

.category:hover {
  background-color: #e2e8f0;
  transform: scale(1.015);
  box-shadow: inset 2px 2px 5px rgba(0,0,0,0.02);
}

.category.active {
  background-color: #c7d2fe;
  color: #1e3a8a;
  font-weight: 600;
  border: 2px solid #3b82f6;
  box-shadow: 0 0 0 3px rgba(59,130,246,0.2);
}

/* Scrollbar Styling (Mac-like) */
.sidebar-container::-webkit-scrollbar {
  width: 8px;
}

.sidebar-container::-webkit-scrollbar-track {
  background: transparent;
}

.sidebar-container::-webkit-scrollbar-thumb {
  background-color: #cbd5e1;
  border-radius: 4px;
}

.sidebar-container::-webkit-scrollbar-thumb:hover {
  background-color: #94a3b8;
}

/* Pie Chart Container */
#chartContainer {
  max-width: 520px;
  margin: 0 auto;
 padding: 10px 10px; /* changed from 20px */
  position: relative;
}


/* Apply Button and Date */
input[type="date"],
button {
  padding: 6px 10px;
  border-radius: 8px;
  border: 1px solid #cbd5e1;
  background: #f8fafc;
  font-size: 14px;
  font-family: 'Segoe UI', sans-serif;
  color: #1e293b;
  transition: 0.2s ease;
}

input[type="date"]:hover,
button:hover {
  border-color: #94a3b8;
  background: #e2e8f0;
}

button {
  background: #3b82f6;
  color: white;
  border: none;
  cursor: pointer;
  padding: 6px 14px;
  font-weight: 500;
  margin-left: 6px;
}

button:hover {
  background-color: #2563eb;
}

/* Chart Canvas Styling */
canvas {
  width: 100% !important;
  height: auto !important;
}

/* Optional Body Tweak */
body {
  background: #f1f5f9;
  font-family: 'Segoe UI', sans-serif;
  padding-bottom: 80px;
}


@media screen and (max-width: 768px) {

  .main-section {
    margin-left: 0;
    padding: 10px;
    padding-top: 30px;
  }


  .sidebar-container {
    width: 100%;
    position: static;
    max-height: none;
    margin-bottom: 20px;
  }

  #chartContainer {
    position: static;
    width: 100%;
    padding: 16px;
    margin-top: 10px;
  }

  .date-filter {
    position: static !important;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 10px;
    width: 90%;
    margin: 0 auto 20px auto;
  }

  .date-filter label,
  .date-filter input,
  .date-filter button {
    font-size: 14px;
    width: 100%;
    text-align: left;
  }

  canvas {
    width: 100% !important;
    height: auto !important;
  }
}


</style>

<div class="main-section">
  <div class="date-filter">
    <label for="from">From:</label>
    <input type="date" id="from">
    <label for="to">To:</label>
    <input type="date" id="to">
    <button onclick="filterByDate()">Apply</button>
  </div>

  <div id="chartContainer">
    <canvas id="categoryChart"></canvas>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const rawData = <%- chartData %>;

  const labels = rawData.map(item => item.category);
  const data = rawData.map(item => item.amount);

  const fixedColors = [
    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
    '#FF9F40', '#8DD18D', '#D3A4FF', '#F67019', '#00A8B5',
    '#FFD700', '#C71585', '#2E8B57', '#CD5C5C', '#FFA07A',
    '#20B2AA', '#87CEEB', '#DDA0DD', '#90EE90', '#778899',
    '#B0C4DE', '#FFA500', '#ADFF2F'
  ];

  const backgroundColors = labels.map((_, i) => fixedColors[i % fixedColors.length]);
  const originalColors = [...backgroundColors];

  const ctx = document.getElementById('categoryChart').getContext('2d');
  const chart = new Chart(ctx, {
    type: 'pie',
    data: {
      labels,
      datasets: [{
        data,
        backgroundColor: backgroundColors,
        borderColor: backgroundColors.map(() => 'transparent'),
        borderWidth: backgroundColors.map(() => 0)
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { position: 'bottom' }
      }
    }
  });

  // Utility function to darken hex color
  function shadeColor(color, percent) {
    let R = parseInt(color.substring(1,3),16);
    let G = parseInt(color.substring(3,5),16);
    let B = parseInt(color.substring(5,7),16);

    R = parseInt(R * (100 + percent) / 100);
    G = parseInt(G * (100 + percent) / 100);
    B = parseInt(B * (100 + percent) / 100);

    R = (R<255)?R:255;
    G = (G<255)?G:255;
    B = (B<255)?B:255;

    const RR = ((R.toString(16).length==1)?"0"+R.toString(16):R.toString(16));
    const GG = ((G.toString(16).length==1)?"0"+G.toString(16):G.toString(16));
    const BB = ((B.toString(16).length==1)?"0"+B.toString(16):B.toString(16));

    return "#"+RR+GG+BB;
  }

  // Sidebar Click Handler
  const categories = document.querySelectorAll('.category');

  categories.forEach((el) => {
    el.addEventListener('click', () => {
      // Remove old active class
      categories.forEach(cat => cat.classList.remove('active'));

      // Add active to clicked
      el.classList.add('active');

      const fullText = el.textContent.trim();
      const label = fullText.split(" ").slice(1).join(" ");
      const index = labels.indexOf(label);

      if (index !== -1) {
        chart.data.datasets[0].backgroundColor = [...originalColors];
        chart.data.datasets[0].backgroundColor[index] = shadeColor(originalColors[index], -25);

        chart.data.datasets[0].borderColor = chart.data.datasets[0].data.map((_, i) =>
          i === index ? '#000000' : 'transparent'
        );
        chart.data.datasets[0].borderWidth = chart.data.datasets[0].data.map((_, i) =>
          i === index ? 4 : 0
        );

        chart.update();
      }
    });
  });

  async function filterByDate() {
  const from = document.getElementById('from').value;
  const to = document.getElementById('to').value;

  if (!from || !to) {
    alert("Please select both dates.");
    return;
  }

  const response = await fetch(`/categories/data?from=${from}&to=${to}`);
  const filteredData = await response.json();

  const labels = filteredData.map(item => item.category);
  const data = filteredData.map(item => item.amount);
  const newColors = labels.map((_, i) => fixedColors[i % fixedColors.length]);

  chart.data.labels = labels;
  chart.data.datasets[0].data = data;
  chart.data.datasets[0].backgroundColor = newColors;
  chart.data.datasets[0].borderColor = newColors.map(() => 'transparent');
  chart.data.datasets[0].borderWidth = newColors.map(() => 0);

  chart.update();
}




  
</script>



